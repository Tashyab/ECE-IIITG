C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.4\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) 
                    -PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.4
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2020 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          #include "cyapicallbacks.h"
  26          
  27          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  28          
  29          
  30          #if defined(__C51__) || defined(__CX51__)
  31                  #define CYPACKED
  32                  #define CYPACKED_ATTR
  33                  #define CYALIGNED
  34                  
  35              #define CY_CFG_UNUSED
  36                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  37          
  38          
  39          
  40                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  41                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  42                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  43          #else
                      #error Unsupported toolchain
              #endif
  46          
  47          
  48          
  49          
  50          /* Clock startup error codes                                                   */
  51          #define CYCLOCKSTART_NO_ERROR    0u
  52          #define CYCLOCKSTART_XTAL_ERROR  1u
  53          #define CYCLOCKSTART_32KHZ_ERROR 2u
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 2   

  54          #define CYCLOCKSTART_PLL_ERROR   3u
  55          #define CYCLOCKSTART_FLL_ERROR   4u
  56          #define CYCLOCKSTART_WCO_ERROR   5u
  57          
  58          
  59          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  60          /*******************************************************************************
  61          * Function Name: CyClockStartupError
  62          ********************************************************************************
  63          * Summary:
  64          *  If an error is encountered during clock configuration (crystal startup error,
  65          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  66          *  the customer, this function will stop in an infinite loop.
  67          *
  68          * Parameters:
  69          *   void
  70          *
  71          * Return:
  72          *   void
  73          *
  74          *******************************************************************************/
  75          CY_CFG_UNUSED
  76          static void CyClockStartupError(uint8 errorCode);
  77          CY_CFG_UNUSED
  78          static void CyClockStartupError(uint8 errorCode)
  79          {
  80   1          /* To remove the compiler warning if errorCode not used.                */
  81   1          errorCode = errorCode;
  82   1      
  83   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  84   1          /* we will end up here to allow the customer to implement something to  */
  85   1          /* deal with the clock condition.                                       */
  86   1      
  87   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  90   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  91   1          /* `#START CyClockStartupError` */
  92   1      
  93   1      
  94   1      
  95   1          /* `#END` */
  96   1      
  97   1          while(1) {}
  98   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
  99   1      }
 100          #endif
 101          
 102          
 103          /*******************************************************************************
 104          * Function Name: ClockSetup
 105          ********************************************************************************
 106          *
 107          * Summary:
 108          *  Performs the initialization of all of the clocks in the device based on the
 109          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 110          *  clocks and setting the necessary dividers to produce the desired frequency. 
 111          *
 112          * Parameters:
 113          *  void
 114          *
 115          * Return:
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 3   

 116          *  void
 117          *
 118          *******************************************************************************/
 119          static void ClockSetup(void);
 120          static void ClockSetup(void)
 121          {
 122   1              /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 123   1              static const uint8 CYCODE BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL[] = {
 124   1                      0x05u, 0x00u, 0x14u, 0x01u};
 125   1      
 126   1              uint32 timeout;
 127   1              uint8 pllLock;
 128   1      
 129   1      
 130   1              /* Configure Analog Clocks based on settings from Clock DWR */
 131   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYCODE *)(BS_CYDEV_CLKDIST_ACFG0_CF
             -G0_VAL), 4u);
 132   1      
 133   1              /* Configure ILO based on settings from Clock DWR */
 134   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 135   1      
 136   1              /* Configure IMO based on settings from Clock DWR */
 137   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 138   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 139   1      
 140   1              /* Configure PLL based on settings from Clock DWR */
 141   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0818u);
 142   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 143   1              /* Wait up to 250us for the PLL to lock */
 144   1              pllLock = 0u;
 145   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 146   1              { 
 147   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 148   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 149   2              }
 150   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 151   1              if (timeout == 0u)
 152   1              {
 153   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 154   2              }
 155   1      
 156   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 157   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 158   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 159   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 160   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 161   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 162   1      
 163   1              /* Configure USB Clock based on settings from Clock DWR */
 164   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 165   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 166   1      }
 167          
 168          
 169          /* Analog API Functions */
 170          
 171          
 172          /*******************************************************************************
 173          * Function Name: AnalogSetDefault
 174          ********************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 4   

 175          *
 176          * Summary:
 177          *  Sets up the analog portions of the chip to default values based on chip
 178          *  configuration options from the project.
 179          *
 180          * Parameters:
 181          *  void
 182          *
 183          * Return:
 184          *  void
 185          *
 186          *******************************************************************************/
 187          static void AnalogSetDefault(void);
 188          static void AnalogSetDefault(void)
 189          {
 190   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 191   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 192   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 193   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 194   1      }
 195          
 196          
 197          /*******************************************************************************
 198          * Function Name: SetAnalogRoutingPumps
 199          ********************************************************************************
 200          *
 201          * Summary:
 202          * Enables or disables the analog pumps feeding analog routing switches.
 203          * Intended to be called at startup, based on the Vdda system configuration;
 204          * may be called during operation when the user informs us that the Vdda voltage
 205          * crossed the pump threshold.
 206          *
 207          * Parameters:
 208          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 209          *
 210          * Return:
 211          *  void
 212          *
 213          *******************************************************************************/
 214          void SetAnalogRoutingPumps(uint8 enabled)
 215          {
 216   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 217   1              if (enabled != 0u)
 218   1              {
 219   2                      regValue |= 0x00u;
 220   2              }
 221   1              else
 222   1              {
 223   2                      regValue &= (uint8)~0x00u;
 224   2              }
 225   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 226   1      }
 227          
 228          
 229          
 230          
 231          /*******************************************************************************
 232          * Function Name: cyfitter_cfg
 233          ********************************************************************************
 234          * Summary:
 235          *  This function is called by the start-up code for the selected device. It
 236          *  performs all of the necessary device configuration based on the design
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 5   

 237          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 238          *  as Clocks and Pins as well as any component configuration that is necessary.
 239          *
 240          * Parameters:
 241          *   void
 242          *
 243          * Return:
 244          *   void
 245          *
 246          *******************************************************************************/
 247          
 248          void cyfitter_cfg(void)
 249          {
 250   1              /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 251   1              static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 252   1                      0x40u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xC0u, 0x00u};
 253   1      
 254   1              /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 255   1              static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
 256   1                      0x00u, 0x0Fu, 0x0Bu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 257   1      
 258   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 259   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 260   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 261   1      
 262   1      
 263   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 264   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0x31u : 0x00u));
 265   1              /* Setup clocks based on selections from Clock DWR */
 266   1              ClockSetup();
 267   1              /* Set Flash Cycles based on newly configured 64.00MHz Bus Clock. */
 268   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 269   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 270   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 271   1      
 272   1              {
 273   2                      static const uint8 CYCODE cfg_byte_table[] = {
 274   2                              0x0Cu,
 275   2                              0x00u, 0x45u, 0x01u, /* Base address 0x004500 */
 276   2                              /* CYDEV_PICU_INTTYPE_PICU15_BASE */
 277   2                              0x7Eu, 0x02u, 
 278   2                              0x00u, 0x52u, 0x01u, /* Base address 0x005200 */
 279   2                              /* CYDEV_PRTDSI_PRT15_BASE */
 280   2                              0x7Cu, 0x40u, 
 281   2                              0x01u, 0x17u, 0x02u, /* Base address 0x011700 */
 282   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 283   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 284   2                              0x01u, 0x19u, 0x02u, /* Base address 0x011900 */
 285   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 286   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 287   2                              0x01u, 0x40u, 0x03u, /* Base address 0x014000 */
 288   2                              /* CYDEV_UCFG_DSI0_BASE */
 289   2                              0x33u, 0x81u, 0x36u, 0x40u, 
 290   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 291   2                              0xCCu, 0x70u, 
 292   2                              0x01u, 0x41u, 0x03u, /* Base address 0x014100 */
 293   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 294   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 295   2                              0x01u, 0x42u, 0x03u, /* Base address 0x014200 */
 296   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 297   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 6   

 298   2                              0x01u, 0x43u, 0x03u, /* Base address 0x014300 */
 299   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 300   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 301   2                              0x01u, 0x47u, 0x04u, /* Base address 0x014700 */
 302   2                              /* CYDEV_UCFG_DSI7_BASE */
 303   2                              0x08u, 0x08u, 0x0Bu, 0x04u, 0x0Fu, 0x40u, 
 304   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 305   2                              0xC2u, 0x0Eu, 
 306   2                              0x01u, 0x48u, 0x04u, /* Base address 0x014800 */
 307   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 308   2                              0xAEu, 0x40u, 0xAFu, 0x81u, 0xEAu, 0x40u, 0xEEu, 0x50u, 
 309   2                              0x01u, 0x4Cu, 0x02u, /* Base address 0x014C00 */
 310   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 311   2                              0xACu, 0x08u, 0xAFu, 0x44u, 
 312   2                              0x01u, 0x51u, 0x01u, /* Base address 0x015100 */
 313   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 314   2                              0x00u, 0x2Au, 
 315   2                      };
 316   2                      /* BYTES: 95 */
 317   2      
 318   2      
 319   2                      CYPACKED typedef struct {
 320   2                              void CYFAR *address;
 321   2                              uint16 size;
 322   2                      } CYPACKED_ATTR cfg_memset_t;
 323   2      
 324   2                      static const cfg_memset_t CYCODE cfg_memset_list[] = {
 325   2                              /* address, size */
 326   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 327   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 328   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 329   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 330   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 331   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 332   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 333   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 334   2                      };
 335   2      
 336   2                      uint8 CYDATA i;
 337   2      
 338   2                      /* Zero out critical memory blocks before beginning configuration */
 339   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 340   2                      {
 341   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 342   3                              CYMEMZERO(ms->address, ms->size);
 343   3                      }
 344   2      
 345   2                      cfg_write_bytes_code(cfg_byte_table);
 346   2      
 347   2                      /* Enable digital routing */
 348   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 349   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 350   2              }
 351   1      
 352   1      
 353   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 354   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DR), (const void CYCODE *)(BS_IOPINS0_8_VAL), 10u);
 355   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DM0), (const void CYCODE *)(BS_IOPINS0_1_VAL), 8u);
 356   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 7   

 357   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 358   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 359   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 360   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 361   1              {
 362   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 363   2              }
 364   1      
 365   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40u);
 366   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40u);
 367   1      
 368   1              /* Perform basic analog initialization to defaults */
 369   1              AnalogSetDefault();
 370   1      
 371   1              /* Configure alternate active mode */
 372   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 373   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 374   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 97
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 131
0000 7C00        R     MOV     R4,#HIGH BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL
0002 7D00        R     MOV     R5,#LOW BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL
0004 7B00              MOV     R3,#00H
0006 7A41              MOV     R2,#041H
0008 7900              MOV     R1,#00H
000A 7F04              MOV     R7,#04H
000C 7E00              MOV     R6,#00H
000E 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 134
0011 904300            MOV     DPTR,#04300H
0014 7406              MOV     A,#06H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0017 904200            MOV     DPTR,#04200H
001A 7452              MOV     A,#052H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
001D 7B0C              MOV     R3,#0CH
001F 7A01              MOV     R2,#01H
0021 790F              MOV     R1,#0FH
0023 120000      E     LCALL   _cyread8
0026 9046A1            MOV     DPTR,#046A1H
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
002B 7B00              MOV     R3,#00H
002D 7A42              MOV     R2,#042H
002F 7922              MOV     R1,#022H
0031 7D18              MOV     R5,#018H
0033 7C08              MOV     R4,#08H
0035 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 142
0038 7B00              MOV     R3,#00H
003A 7A42              MOV     R2,#042H
003C 7920              MOV     R1,#020H
003E 7D51              MOV     R5,#051H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 9   

0040 7C12              MOV     R4,#012H
0042 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 144
0045 900000      R     MOV     DPTR,#pllLock
0048 E4                CLR     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
004A 7F19              MOV     R7,#019H
004C 7E00              MOV     R6,#00H
004E 7D00              MOV     R5,#00H
0050 7C00              MOV     R4,#00H
0052 900000      R     MOV     DPTR,#timeout
0055 120000      E     LCALL   ?C?LSTXDATA
0058         ?C0004:
0058 900000      R     MOV     DPTR,#timeout
005B 120000      E     LCALL   ?C?LLDXDATA
005E D3                SETB    C
005F EF                MOV     A,R7
0060 9400              SUBB    A,#00H
0062 EE                MOV     A,R6
0063 9400              SUBB    A,#00H
0065 404E              JC      ?C0005
0067 900000      R     MOV     DPTR,#pllLock
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 6403              XRL     A,#03H
006F 6044              JZ      ?C0005
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0071 904225            MOV     DPTR,#04225H
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 5401              ANL     A,#01H
0079 FF                MOV     R7,A
007A 7E00              MOV     R6,#00H
007C 900000      R     MOV     DPTR,#pllLock
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 EE                MOV     A,R6
0082 25E0              ADD     A,ACC
0084 FE                MOV     R6,A
0085 EE                MOV     A,R6
0086 4F                ORL     A,R7
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 5403              ANL     A,#03H
008B FF                MOV     R7,A
008C 900000      R     MOV     DPTR,#pllLock
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0091 7FE0              MOV     R7,#0E0H
0093 7E01              MOV     R6,#01H
0095 7D00              MOV     R5,#00H
0097 7C00              MOV     R4,#00H
0099 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 149
009C 900000      R     MOV     DPTR,#timeout
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 10  

00A4 7AFF              MOV     R2,#0FFH
00A6 79FF              MOV     R1,#0FFH
00A8 78FF              MOV     R0,#0FFH
00AA 120000      E     LCALL   ?C?LADD
00AD 900000      R     MOV     DPTR,#timeout
00B0 120000      E     LCALL   ?C?LSTXDATA
00B3 80A3              SJMP    ?C0004
00B5         ?C0005:
                                           ; SOURCE LINE # 151
00B5 900000      R     MOV     DPTR,#timeout
00B8 120000      E     LCALL   ?C?LLDXDATA
00BB EF                MOV     A,R7
00BC 4E                ORL     A,R6
00BD 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
00BF 7F03              MOV     R7,#03H
00C1 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 154
00C4         ?C0007:
                                           ; SOURCE LINE # 157
00C4 7B00              MOV     R3,#00H
00C6 7A40              MOV     R2,#040H
00C8 7904              MOV     R1,#04H
00CA 7D00              MOV     R5,#00H
00CC 7C01              MOV     R4,#01H
00CE 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 158
00D1 904004            MOV     DPTR,#04004H
00D4 7407              MOV     A,#07H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00D7 904006            MOV     DPTR,#04006H
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
00DC 904008            MOV     DPTR,#04008H
00DF 7448              MOV     A,#048H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00E2 904004            MOV     DPTR,#04004H
00E5 E4                CLR     A
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
00E7 904009            MOV     DPTR,#04009H
00EA E4                CLR     A
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
00EC 904001            MOV     DPTR,#04001H
00EF 7402              MOV     A,#02H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00F2 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 11  

0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 214
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 12  

001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0035         ?C0011:
                                           ; SOURCE LINE # 225
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 264
0000 904800            MOV     DPTR,#04800H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0005 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 268
0008 904800            MOV     DPTR,#04800H
000B 74C0              MOV     A,#0C0H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
000E 7B00              MOV     R3,#00H
0010 7A46              MOV     R2,#046H
0012 79E8              MOV     R1,#0E8H
0014 120000      E     LCALL   _cyread8
0017 EF                MOV     A,R7
0018 4405              ORL     A,#05H
001A FD                MOV     R5,A
001B 7B00              MOV     R3,#00H
001D 7A46              MOV     R2,#046H
001F 79E8              MOV     R1,#0E8H
0021 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 339
0024 750000      R     MOV     i,#00H
0027         ?C0013:
0027 E500        R     MOV     A,i
0029 C3                CLR     C
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 13  

002A 9408              SUBB    A,#08H
002C 503A              JNC     ?C0014
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
002E AF00        R     MOV     R7,i
0030 EF                MOV     A,R7
0031 75F005            MOV     B,#05H
0034 A4                MUL     AB
0035 2400        R     ADD     A,#LOW cfg_memset_list
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH cfg_memset_list
003C F583              MOV     DPH,A
003E AF82              MOV     R7,DPL
0040 AE83              MOV     R6,DPH
0042 8E00        R     MOV     ms,R6
0044 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 342
0046 AE00        R     MOV     R6,ms
0048 AF00        R     MOV     R7,ms+01H
004A 8F82              MOV     DPL,R7
004C 8E83              MOV     DPH,R6
004E 120000      E     LCALL   ?C?PLDCODE
0051 AE00        R     MOV     R6,ms
0053 AF00        R     MOV     R7,ms+01H
0055 8F82              MOV     DPL,R7
0057 8E83              MOV     DPH,R6
0059 7403              MOV     A,#03H
005B 93                MOVC    A,@A+DPTR
005C FC                MOV     R4,A
005D 7404              MOV     A,#04H
005F 93                MOVC    A,@A+DPTR
0060 FD                MOV     R5,A
0061 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 343
0064 0500        R     INC     i
0066 80BF              SJMP    ?C0013
0068         ?C0014:
                                           ; SOURCE LINE # 345
0068 7E00        R     MOV     R6,#HIGH cfg_byte_table
006A 7F00        R     MOV     R7,#LOW cfg_byte_table
006C 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 348
006F 7B01              MOV     R3,#01H
0071 7A50              MOV     R2,#050H
0073 7903              MOV     R1,#03H
0075 120000      E     LCALL   _cyread8
0078 EF                MOV     A,R7
0079 4402              ORL     A,#02H
007B FD                MOV     R5,A
007C 7B01              MOV     R3,#01H
007E 7A50              MOV     R2,#050H
0080 7903              MOV     R1,#03H
0082 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 349
0085 7B01              MOV     R3,#01H
0087 7A50              MOV     R2,#050H
0089 7913              MOV     R1,#013H
008B 120000      E     LCALL   _cyread8
008E EF                MOV     A,R7
008F 4402              ORL     A,#02H
0091 FD                MOV     R5,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 14  

0092 7B01              MOV     R3,#01H
0094 7A50              MOV     R2,#050H
0096 7913              MOV     R1,#013H
0098 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 354
009B 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
009D 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
009F 7B00              MOV     R3,#00H
00A1 7A51              MOV     R2,#051H
00A3 79F0              MOV     R1,#0F0H
00A5 7F0A              MOV     R7,#0AH
00A7 7E00              MOV     R6,#00H
00A9 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 355
00AC 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
00AE 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
00B0 7B00              MOV     R3,#00H
00B2 7A51              MOV     R2,#051H
00B4 7912              MOV     R1,#012H
00B6 7F08              MOV     R7,#08H
00B8 7E00              MOV     R6,#00H
00BA 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 356
00BD 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00BF 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00C1 7B00              MOV     R3,#00H
00C3 7A51              MOV     R2,#051H
00C5 7922              MOV     R1,#022H
00C7 7F08              MOV     R7,#08H
00C9 7E00              MOV     R6,#00H
00CB 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 357
00CE 9044F4            MOV     DPTR,#044F4H
00D1 7401              MOV     A,#01H
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
00D4 904322            MOV     DPTR,#04322H
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 EF                MOV     A,R7
00DA 4408              ORL     A,#08H
00DC FF                MOV     R7,A
00DD 904322            MOV     DPTR,#04322H
00E0 EF                MOV     A,R7
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
00E2 9046EC            MOV     DPTR,#046ECH
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 C3                CLR     C
00E9 9405              SUBB    A,#05H
00EB 5006              JNC     ?C0016
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
00ED 904689            MOV     DPTR,#04689H
00F0 743A              MOV     A,#03AH
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
00F3         ?C0016:
                                           ; SOURCE LINE # 365
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/01/2024 15:28:44 PAGE 15  

00F3 7B01              MOV     R3,#01H
00F5 7A50              MOV     R2,#050H
00F7 7907              MOV     R1,#07H
00F9 7D40              MOV     R5,#040H
00FB 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 366
00FE 7B01              MOV     R3,#01H
0100 7A50              MOV     R2,#050H
0102 7917              MOV     R1,#017H
0104 7D40              MOV     R5,#040H
0106 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 369
0109 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 372
010C 7B00              MOV     R3,#00H
010E 7A43              MOV     R2,#043H
0110 79A0              MOV     R1,#0A0H
0112 C003              PUSH    AR3
0114 C002              PUSH    AR2
0116 C001              PUSH    AR1
0118 7B00              MOV     R3,#00H
011A 7A43              MOV     R2,#043H
011C 79B0              MOV     R1,#0B0H
011E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0121 120000      E     LCALL   ?C?PSTXDATA
0124 D001              POP     AR1
0126 D002              POP     AR2
0128 D003              POP     AR3
012A 7F0E              MOV     R7,#0EH
012C 7E00              MOV     R6,#00H
012E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 373
0131 9043B0            MOV     DPTR,#043B0H
0134 E0                MOVX    A,@DPTR
0135 FF                MOV     R7,A
0136 EF                MOV     A,R7
0137 54FD              ANL     A,#0FDH
0139 FF                MOV     R7,A
013A EF                MOV     A,R7
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
013C 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    696    ----
   CONSTANT SIZE    =    165    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
